//    uniCenta oPOS  - Touch Friendly Point Of Sale
//    Copyright (C) 2008-2009 Openbravo, S.L.
//    http://www.unicenta.com
//
//    This file is part of uniCenta oPOS
//
//    uniCenta oPOS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//   uniCenta oPOS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with uniCenta oPOS.  If not, see <http://www.gnu.org/licenses/>.


package com.openbravo.pos.payment;

import com.openbravo.basic.BasicException;
import com.openbravo.format.Formats;
import com.openbravo.pos.customers.CustomerInfoExt;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.util.RoundUtils;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.DataLogicSales;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author JG uniCenta
 */
public class JPaymentGiftCard extends javax.swing.JPanel implements JPaymentInterface {
    private JPaymentNotifier m_notifier;
    
    private double m_dTicket;
    private double m_dTotal;  
    private String m_sPaper; // "paperin", "paperout"
    private AppView appView;
    
    /** Creates new form JPaymentTicket
     * @param notifier
     * @param sPaper */
    public JPaymentGiftCard(AppView app, JPaymentNotifier notifier, String sGiftcard) {
        appView = app;
        m_notifier = notifier;
        m_sPaper = sGiftcard;
        
        initComponents();
        
        m_jTextString.addPropertyChangeListener("Edition", new RecalculateState());
        
        m_jKeyString.addPropertyChangeListener("Edition", new RecalculateState());
        m_jKeyString.addEditorKeys(m_jKeys);
        m_jKeyString.activate();
    }
    
    /**
     *
     * @param customerext
     * @param dTotal
     * @param transID
     */
    @Override
    public void activate(CustomerInfoExt customerext, double dTotal, String transID) {
        myInitComponents();
        m_dTotal = dTotal;
        m_jTendered.reset();
        printState();
    }
    
    public void myInitComponents() {
        m_jKeyString.reset();
        m_jKeyString.setText("");
        lblSerial.setText("");
        m_jTextString.setText("");
    }
    
    /**
     *
     * @return
     */
    @Override
    public Component getComponent() {
        return this;
    }
    
    /**
     *
     * @return
     */
    @Override
    public PaymentInfo executePayment() {

        return new PaymentInfoTicket(m_dTicket, m_sPaper, lblSerial.getText());
    }    
    
    private void printState() {
        Double value = m_jTendered.getDoubleValue();
        if (value == null) {
            m_dTicket = m_dTotal;
        } else {
            m_dTicket = value;
        } 
        
        m_jMoneyEuros.setText(Formats.CURRENCY.formatValue(new Double(m_dTicket)));
        
        int iCompare = RoundUtils.compare(m_dTicket, m_dTotal);
        
        // it is allowed to pay more
        //m_notifier.setStatus(m_dTicket > 0.0, iCompare >= 0);
        m_notifier.setStatus(m_dTicket > 0.0 && iCompare <= 0 && validateFields(), iCompare == 0 && validateFields());
    }
    
    public boolean validateFields(){
        return (isValidMonto() && isValidSerial());
    }
    
    private boolean isValidSerial() {
        return !(lblSerial.getText() == null || lblSerial.getText().equals(""));
    }
    
    private boolean isValidMonto() {
        return !(m_jTendered.getText() == null || m_jTendered.getText().equals(""));
    }
    
    private class RecalculateState implements PropertyChangeListener {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            RefreshLabels();
            printState();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        m_jMoneyEuros = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblSerial = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        m_jKeys = new com.openbravo.editor.JEditorKeys();
        m_jTextString = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        m_jKeyString = new com.openbravo.editor.JEditorString();
        m_jTendered = new com.openbravo.editor.JEditorCurrencyPositive();

        jTextField1.setText("jTextField1");

        setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(null);

        m_jMoneyEuros.setBackground(new java.awt.Color(204, 255, 51));
        m_jMoneyEuros.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        m_jMoneyEuros.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        m_jMoneyEuros.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")), javax.swing.BorderFactory.createEmptyBorder(1, 4, 1, 4)));
        m_jMoneyEuros.setOpaque(true);
        m_jMoneyEuros.setPreferredSize(new java.awt.Dimension(180, 30));
        jPanel4.add(m_jMoneyEuros);
        m_jMoneyEuros.setBounds(120, 4, 180, 30);

        jLabel2.setText("Serial");
        jPanel4.add(jLabel2);
        jLabel2.setBounds(10, 50, 110, 30);

        lblSerial.setBackground(new java.awt.Color(153, 153, 255));
        lblSerial.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        lblSerial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSerial.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")), javax.swing.BorderFactory.createEmptyBorder(1, 4, 1, 4)));
        lblSerial.setOpaque(true);
        lblSerial.setPreferredSize(new java.awt.Dimension(150, 25));
        lblSerial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSerialMouseClicked(evt);
            }
        });
        jPanel4.add(lblSerial);
        lblSerial.setBounds(120, 45, 180, 30);
        jPanel4.add(jPanel2);
        jPanel2.setBounds(10, 200, 270, 80);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setText(AppLocal.getIntString("label.InputCash")); // NOI18N
        jLabel8.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel4.add(jLabel8);
        jLabel8.setBounds(10, 4, 100, 30);

        add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.Y_AXIS));
        jPanel12.add(m_jKeys);

        m_jTextString.setEditable(false);
        m_jTextString.setForeground(new java.awt.Color(237, 237, 237));
        m_jTextString.setBorder(null);
        m_jTextString.setDisabledTextColor(new java.awt.Color(237, 237, 237));
        m_jTextString.setMaximumSize(new java.awt.Dimension(200, 1));
        m_jTextString.setMinimumSize(new java.awt.Dimension(10, 10));
        m_jTextString.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                m_jTextStringFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                m_jTextStringFocusLost(evt);
            }
        });
        jPanel12.add(m_jTextString);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel1.setLayout(new java.awt.BorderLayout());

        m_jKeyString.setNextFocusableComponent(lblSerial);
        jPanel1.add(m_jKeyString, java.awt.BorderLayout.PAGE_START);

        m_jTendered.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel1.add(m_jTendered, java.awt.BorderLayout.CENTER);

        jPanel12.add(jPanel1);

        jPanel11.add(jPanel12, java.awt.BorderLayout.NORTH);

        add(jPanel11, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents
    
    private void lblSerialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSerialMouseClicked
        m_jKeyString.activate();
        m_jKeyString.setVisible(true);
    }//GEN-LAST:event_lblSerialMouseClicked

    private void m_jTextStringFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_m_jTextStringFocusLost
        /*if (m_jKeyString.getText() != null && !m_jKeyString.getText().isEmpty()) {
            updateAmountGiftCard(m_jKeyString.getText());
            bFocusIndicated = false;
        }*/
    }//GEN-LAST:event_m_jTextStringFocusLost

    private void m_jTextStringFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_m_jTextStringFocusGained
        if (m_jKeyString.getText() != null && !m_jKeyString.getText().isEmpty())
            updateAmountGiftCard(m_jKeyString.getText());
    }//GEN-LAST:event_m_jTextStringFocusGained
    
    public void RefreshLabels() {
        if(m_jKeyString.isVisible()) {
            lblSerial.setText(m_jKeyString.getText());
            m_jTextString.setText(m_jKeyString.getText());
        }
        //if (m_jKeyString.getText() != null && !m_jKeyString.getText().isEmpty())
        //    updateAmountGiftCard(m_jKeyString.getText());
    }
    
    public void updateAmountGiftCard(String serialGift) {
        JPaymentGiftCardPanel giftCardObj = new JPaymentGiftCardPanel();
        serialGift = m_jKeyString.getText();
        
        try {
            DataLogicSales dataLogicSales;
            dataLogicSales = (DataLogicSales) appView.getBean("com.openbravo.pos.forms.DataLogicSales");
            
            if (!serialGift.isEmpty()) {
                giftCardObj = dataLogicSales.getAmountGiftCard(serialGift);
                double saldo = giftCardObj.getAmount();
                
                if (!giftCardObj.equals("") && giftCardObj!=null) {
                    if (saldo <= 0) {
                        JOptionPane.showMessageDialog(null, "Serial de tarjeta incorrecto o no tiene saldo disponible");
                        clearInputText();
                    } else {
                        if (giftCardObj.getAmount() == 0) {
                            m_dTicket = m_dTotal;
                        } else {
                            m_dTicket = saldo;
                        }
                        if (saldo > m_dTotal) {
                            JOptionPane.showMessageDialog(null, "El saldo de la tarjeta ("+Formats.CURRENCY.formatValue(saldo)+") es mayor al total a pagar("+Formats.CURRENCY.formatValue(m_dTotal)+")");
                            clearInputText();
                            printState();
                            return;
                        }
                        m_jTendered.setDoubleValue(m_dTicket);
                        printState();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Serial de tarjeta incorrecto o no tiene saldo disponible");
                    clearInputText();
                    printState();
                    return;
                }
            } else {
                m_jTendered.setDoubleValue(m_dTotal);
                printState();
            }
        } catch (BasicException ex) {
            Logger.getLogger(JPaymentGiftCard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void clearInputText() {
        m_jKeyString.setText("");
        m_jTextString.setText("");
        lblSerial.setText("");
        m_jKeyString.activate();
        m_jKeyString.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblSerial;
    private com.openbravo.editor.JEditorString m_jKeyString;
    private com.openbravo.editor.JEditorKeys m_jKeys;
    private javax.swing.JLabel m_jMoneyEuros;
    private com.openbravo.editor.JEditorCurrencyPositive m_jTendered;
    private javax.swing.JTextField m_jTextString;
    // End of variables declaration//GEN-END:variables
}
