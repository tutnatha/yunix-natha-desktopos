// script.ServiceCharge
// This script applies UsersInput% Service for the Total Receipt value
//
//    uniCenta oPOS - Touch Friendly Point Of Sale
//    Copyright (c) 2009-2014 uniCenta
//    http://sourceforge.net/projects/unicentaopos
//
//    This file is part of uniCenta oPOS.
//
//    uniCenta oPOS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    uniCenta oPOS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with uniCenta oPOS.  If not, see <http://www.gnu.org/licenses/>.
// **************************************************************************
// This script applies UsersInput% or Fixed Service Charge for the Total Receipt value

import com.openbravo.format.Formats;
import com.openbravo.pos.ticket.TicketLineInfo;
import com.openbravo.pos.ticket.TaxInfo;
import com.openbravo.pos.ticket.TicketProductInfo;
import java.util.Properties;
import com.openbravo.beans.JPasswordDialog;
import com.openbravo.pos.customers.CustomerInfoExt;
import com.openbravo.pos.forms.DataLogicSystem;
import com.openbravo.pos.forms.AppUser;
import com.openbravo.data.loader.Session;
import javax.swing.JOptionPane;
import com.openbravo.pos.sales.TaxesLogic;
import com.openbravo.pos.forms.DataLogicSales; 
import com.ghintech.fiscalprint.DataLogicFiscal;


Session session = new Session(dbURL, dbUser, dbPassword);
DataLogicSales logicsale = new DataLogicSales();
logicsale.init(session);
DataLogicSystem logicsystem = new DataLogicSystem();
logicsystem.init(session);
DataLogicFiscal logicfiscal = new DataLogicFiscal();
logicfiscal.init(session);
Properties p = logicsystem.getResourceAsProperties("fiscalprint.properties");
Properties propsdb = logicsystem.getResourceAsProperties(logicfiscal.getHostName() + "/properties");
String invoiceFolder = propsdb.getProperty("invoiceFolder");
String requestTipAmt = p.getProperty("requestTipAmt");
String vendor = propsdb.getProperty("vendor");
try{
if(vendor.compareTo("thefactory") == 0){
    //eliminamos el status anterior si existe	
    fileStatus = new File(invoiceFolder + "Status_Error.txt");    
    if(fileStatus.exists()){
        fileStatus.delete();
    }
    file = new File(invoiceFolder + "factura.txt");    
    if(file.exists()){
        file.delete();
    }
    boolean checkprinter=false;
	//generamos el estatus de informacion para leer la informacin fiscal y ejecutamos el proceso
	fileProcess=new File(invoiceFolder + "IntTFHKA.exe");
	if(fileProcess.exists()){
            String filePath2 = invoiceFolder + "IntTFHKA.exe CheckFprinter()";
            Process p1 = Runtime.getRuntime().exec(filePath2);
            p1.waitFor();
            //usamos filereader para extraer la informacion e insertarla en el ticket
            fileStatus = new File(invoiceFolder + "Status_Error.txt");    

            if(fileStatus.exists()){

                // creates a FileReader Object
                FileReader reader = new FileReader(fileStatus);
                BufferedReader br = new BufferedReader(reader); 
                String status; 
                while((status = br.readLine()) != null) { 
                        if(status.substring(0,4).compareTo("TRUE")==0){
                                checkprinter=true;
                        }

                } 
                reader.close(); 
            }
        
	}
	if(!checkprinter){
            JOptionPane.showMessageDialog(null, 
                                "No Existe Impresora Conectada o Esta Apagada", "POS", JOptionPane.PLAIN_MESSAGE);   
                            return 1;         
        }
}
else if(vendor.compareTo("bematech") == 0){
    }
else if(vendor.compareTo("hasar") == 0){

}
}catch(Exception e){
	e.printStackTrace();
}
//Verificacion si no seleccionaron clientes sale cliente de contado
if (ticket.getCustomer()== null){
            CustomerInfoExt customer=new CustomerInfoExt("000");
            ticket.setCustomer(customer);
            
}

//Solicitud del monto de la propina
if(requestTipAmt.compareTo("Y")==0){ 
    if(ticket.getTicketType()==0){  
        length=ticket.getLinesCount();
        for (int i = 0; i < length; i++) {
            line = ticket.getLine(i); 
            if(line.getProductID()!=null){
                if(line.getProductID().compareTo("000")==0){
                    return null;
                }
            }
        } 
        total = ticket.getSubTotal(); 
        if (total > 0.0) { 
            double scrate = total*0.10;
            String scval  = Formats.DOUBLE.formatValue(scrate);
            scper = JOptionPane.showInputDialog(null, "Monto de Propina",scval);
            if(scper==null){
                return 1;
            }
            taxeslogic = new TaxesLogic(logicsale.getTaxList().list());
            TaxInfo tax = taxeslogic.getTaxInfo("000");
            ticket.insertLine(ticket.getLinesCount(),
                    new TicketLineInfo("000",
                        "Servicio Sugerido 10%",  
                        "000",         
                        1.0,
                        Double.valueOf(scper.replace(",",".")),
                        tax));
            sales.setSelectedIndex(ticket.getLinesCount() - 1);
        } else { 
            java.awt.Toolkit.getDefaultToolkit().beep(); 
        }
    }
}

String MandatoryCustomer = p.getProperty("MandatoryCustomer");
if(MandatoryCustomer.equals("Y")){
    if (ticket.getCustomer()==null){
        JOptionPane.showMessageDialog(null, 
            "Debe seleccionar un cliente para continuar", "POS", JOptionPane.PLAIN_MESSAGE);   
            return 1;
    }
}
